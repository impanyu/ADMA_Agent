{
    "ADMA_list_directory_contents": {
        "type":"method",
        "call_condition": "",
        "description": "Given a path of directory on ADMA, return the list of paths under the directory.",
        "input":["ADMA_list_directory_contents&dir_path"],
        "output":["ADMA_list_directory_contents&output_list"]
    },
    "ADMA_list_directory_contents&dir_path":{
        "type":"string",
        "description":"ADMA_list_directory_contents&dir_path is a path of the directory on the ADMA system. The format should be like path/to/directory, with 0 or more / in the path.",
        "output_from":[],
        "input_to":["ADMA_list_directory_contents"],
        "value":""
    },
    "ADMA_list_directory_contents&output_list":{
        "type":"list of strings",
        "description":"ADMA_list_directory_contents&output_list is a list of paths in the ADMA system.",
        "output_from":["ADMA_list_directory_contents"],
        "input_to":["subscribe_list_1"],
        "value":[]
    },
    "ADMA_list_directory_contents&output_list_current_index":{
        "type":"integer",
        "description":"ADMA_list_directory_contents&output_list_current_index is the current index of ADMA_list_directory_contents&output_list.",
        "output_from":[],
        "input_to":["subscribe_list_1"],
        "value":0
    },

    "iter_list_1":{
        "type":"method",
        "call_condition": "Do not call this method if ADMA_list_directory_contents&output_list_current_index is greater than the length of ADMA_list_directory_contents&output_list",
        "description":"Given a list of path and an index, return the path at the index and increase the index by 1.",
        "input":["ADMA_list_directory_contents&output_list","ADMA_list_directory_contents&output_list_current_index"],
        "output":["ADMA_get_meta_data&path","ADMA_list_directory_contents&output_list_current_index"]
    },

    "iter_list_2":{
        "type":"method",
        "call_condition": "Do not call this method if ADMA_list_directory_contents&output_list_current_index is greater than the length of ADMA_list_directory_contents&output_list",
        "description":"Given a list of path and an index, return the path at the index and increase the index by 1.",
        "input":["ADMA_list_directory_contents&output_list","ADMA_list_directory_contents&output_list_current_index"],
        "output":["ADMA_list_directory_contents&dir_path","ADMA_list_directory_contents&output_list_current_index"]
    },



    "ADMA_get_meta_data":{
        "type":"method",
        "call_condition": "",
        "description":"Given a path on ADMA, return the meta data of the path on the ADMA server.",
        "input":["ADMA_get_meta_data&path"],
        "output":["ADMA_get_meta_data&meta_data"]
    },
    "ADMA_get_meta_data&path":{
        "type":"string",
        "description":"ADMA_get_meta_data&path is a path of the file or folder on the ADMA server.",
        "output_from":[],
        "input_to":["ADMA_get_meta_data"],
        "value":""
    },
    "ADMA_get_meta_data&meta_data":{
        "type":"ADMA meta data",
        "description":"ADMA_get_meta_data&meta_data is the meta data of the file or folder on the ADMA server.",
        "output_from":["ADMA_get_meta_data"],
        "input_to":[],
        "value":{}
    },

    "ADMA_push_to_meta_data_list":{
        "type":"method",
        "call_condition": "",
        "description":"Given a meta data, push the meta data to the list.",
        "input":["ADMA_get_meta_data&meta_data"],
        "output":["ADMA_push_to_meta_data_list&output_list"]
    },
    "ADMA_push_to_meta_data_list&output_list":{
        "type":"list of ADMA meta data",
        "description":"ADMA_push_to_meta_data_list&output_list is a list of ADMA meta data of the file or folder on the ADMA server.",
        "output_from":["ADMA_push_to_meta_data_list"],
        "input_to":[],
        "value":[]
    },


    "ADMA_menu_option":{
        "type":"method",
        "call_condition": "",
        "description":"Given a menu name and a path, return the url of the menu on the ADMA server.",
        "input":["ADMA_menu_option&menu_name","ADMA_menu_option&path"],
        "output":["ADMA_menu_option&menu_url"]
    },
    "ADMA_menu_option&menu_name":{
        "type":"string",
        "description":"ADMA_menu_option&menu_name is the name of the menu on the ADMA server. It should be one of the following: search, share_with_me, files, data, models, tools, collections, documentation, api.",
        "output_from":[],
        "input_to":["ADMA_menu_option"],
        "value":""
    },
    "ADMA_menu_option&path":{
        "type":"string",
        "description":"ADMA_menu_option&path is the path of the menu on the ADMA server. It should be in the format of path/to/directory, with 0 or more / in the path.",
        "output_from":[],
        "input_to":["ADMA_menu_option"],
        "value":""
    },
    "ADMA_menu_option&menu_url":{
        "type":"string",
        "description":"ADMA_menu_option&menu_url is the url of the menu on the ADMA server.",
        "output_from":["ADMA_menu_option"],
        "input_to":[],
        "value":""
    },


    "JD_ENREEC_boundary_in_field":{
        "type":"method",
        "call_condition": "",
        "description":"Given a field_id, return the file path of the boundary of the field in ENREEC from John Deere. Note, this field_id is a long string, like 514a1e63-0000-1000-4052-e1e1e1263770, which is different from the field name, like 1863, if you need field_id, use JD_ENREEC_field_id_from_name to translate field_name to field_id.",
        "input":["JD_ENREEC_boundary_in_field&field_id"],
        "output":["JD_ENREEC_boundary_in_field&boundary"]
    },
    "JD_ENREEC_boundary_in_field&field_id":{
        "type":"field id string",
        "description":"JD_ENREEC_boundary_in_field&field_id is the id of the field in ENREEC from John Deere, which must be a long string.",
        "output_from":["JD_ENREEC_field_id_assign_1"],
        "input_to":["JD_ENREEC_boundary_in_field"],
        "value":""
    },
    "JD_ENREEC_boundary_in_field&boundary":{
        "type":"object",
        "description":"JD_ENREEC_boundary_in_field&boundary is the file path of the boundary of the field in ENREEC from John Deere.",
        "output_from":["JD_ENREEC_boundary_in_field"],
        "input_to":[],
        "value":{}
    },


    "JD_ENREEC_fields":{
        "type":"method",
        "call_condition": "",
        "description":"Return a file path of a json file that contains all the fields in ENREEC from John Deere.",
        "input":[],
        "output":["JD_ENREEC_fields&fields_file_path"]
    },
    "JD_ENREEC_fields&fields_file_path":{
        "type":"json file",
        "description":"JD_ENREEC_fields&fields_file_path is the json file path of all the fields in ENREEC from John Deere, in which the key is the field_id and the value is the field name.",
        "output_from":["JD_ENREEC_fields"],
        "input_to":[],
        "value":[]
    },


    "JD_ENREEC_field_id_from_name":{
        "type":"method",
        "call_condition": "",
        "description":"Given a field name, return the field_id of the field in ENREEC from John Deere.",
        "input":["JD_ENREEC_field_id_from_name&field_name"],
        "output":["JD_ENREEC_field_id_from_name&field_id"]
    },
    "JD_ENREEC_field_id_from_name&field_name":{
        "type":"string",
        "description":"JD_ENREEC_field_id_from_name&field_name is the name of the field in ENREEC from John Deere.",
        "output_from":[],
        "input_to":["JD_ENREEC_field_id_from_name"],
        "value":""
    },
    "JD_ENREEC_field_id_from_name&field_id":{
        "type":"field id string",
        "description":"JD_ENREEC_field_id_from_name&field_id is the id of the field in ENREEC from John Deere, which must be a long string, in the format of 514a1e63-0000-1000-4052-e1e1e1263770",
        "output_from":["JD_ENREEC_field_id_from_name"],
        "input_to":["JD_ENREEC_field_id_assign_1"],
        "value":""
    },

    "JD_ENREEC_field_id_assign_1":{
        "type":"method",
        "call_condition": "",
        "description":"assign the value of JD_ENREEC_field_id_from_name&field_id to JD_ENREEC_boundary_in_field&field_id, this is to ensure JD_ENREEC_boundary_in_field has the correct field_id as input.",
        "input":["JD_ENREEC_field_id_from_name&field_id"],
        "output":["JD_ENREEC_boundary_in_field&field_id"]
    },


    "Realm5_format_data_for_plot":{
        "type":"method",
        "call_condition": "",
        "description":"Given a file path of the realm5 weather data file and a list variable names, return the file path of the formatted json data for plot.",
        "input":["Realm5_format_data_for_plot&file_path","Realm5_format_data_for_plot&variable_names"],
        "output":["Realm5_format_data_for_plot&formatted_data_file_path"]
    },
    "Realm5_format_data_for_plot&file_path":{
        "type":"file path",
        "description":"Realm5_format_data_for_plot&file_path is the file path of the realm5 weather data file.",
        "output_from":["Realm5_assign_file_path"],
        "input_to":["Realm5_format_data_for_plot"],
        "value":""
    },
    "Realm5_format_data_for_plot&variable_names":{
        "type":"list of strings",
        "description":"Realm5_format_data_for_plot&variable_names is a list of variable names, which must be from [ 'wind_direction','wind_speed','temperature', 'humidity','pressure'].",
        "output_from":[],
        "input_to":["Realm5_format_data_for_plot"],
        "value":["temperature"]
    },
    "Realm5_format_data_for_plot&formatted_data_file_path":{
        "type":"file path",
        "description":"Realm5_format_data_for_plot&formatted_data_file_path is the file path of the formatted json data for plot.",
        "output_from":["Realm5_format_data_for_plot"],
        "input_to":[],
        "value":"tmp/Realm5_formatted_data.json"
    },

    "Realm5_generate_file_url":{
        "type":"method",
        "call_condition": "",
        "description":"Given a date string, return the file path of the realm5 weather data file. The date string should be in the format of 'YYYY-MM-DD'.",
        "input":["Realm5_generate_file_url&date_str"],
        "output":["ADMA_download_file&file_path"]
    },
    "Realm5_generate_file_url&date_str":{
        "type":"date string",
        "description":"Realm5_generate_file_url&date_str is the date string in the format of 'YYYY-MM-DD'.",
        "output_from":[],
        "input_to":["Realm5_generate_file_url"],
        "value":"2024-01-01"
    },




    "ADMA_download_file":{
        "type":"method",
        "call_condition": "",
        "description":"Given a file path on ADMA, download the file and return the local file path.",
        "input":["ADMA_download_file&file_path"],
        "output":["ADMA_download_file&downloaded_file_path"]
    },
    "ADMA_download_file&file_path":{
        "type":"file path",
        "description":"ADMA_download_file&file_path is the file path of the file to be downloaded on ADMA.",  
        "output_from":["Realm5_generate_file_url"],
        "input_to":["ADMA_download_file"],
        "value":""
    },
    "ADMA_download_file&downloaded_file_path":{
        "type":"file path",
        "description":"ADMA_download_file&downloaded_file_path is the local file path of the downloaded file.",
        "output_from":["ADMA_download_file"],
        "input_to":["Realm5_assign_file_path"],
        "value":""
    },

    "Realm5_assign_file_path":{
        "type":"method",
        "call_condition": "",
        "description":"Assign ADMA_download_file&downloaded_file_path to Realm5_format_data_for_plot&file_path",
        "input":["ADMA_download_file&downloaded_file_path"],
        "output":["Realm5_format_data_for_plot&file_path"]
    }




    
    
    


    
    

 
}